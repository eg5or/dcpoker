export type User = {
  id: string;
  name: string;
  isOnline: boolean;
  vote: number | null;
  changedVoteAfterReveal?: boolean;
  joinedAt: number;
  emojiAttacks: {
    [emoji: string]: number;
  };
  lastResetTime?: number;
  lastShakeTime?: number;
};

export interface Consistency {
  emoji: string;
  description: string;
}

export interface GameState {
  users: User[];
  isRevealed: boolean;
  averageVote: number | null;
  usersChangedVoteAfterReveal: string[];
  consistency: Consistency | null;
}

export const FIBONACCI_SEQUENCE = [0.1, 0.5, 1, 2, 3, 5, 8, 13, 20, 40, 100];

export interface EmojiTrajectory {
  startX: number;  // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
  startY: number;  // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
  angle: number;   // —É–≥–æ–ª –±—Ä–æ—Å–∫–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
  speed: number;   // –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
}

export interface ServerEvents {
  'game:state': (state: GameState) => void;
  'user:joined': (user: User) => void;
  'user:left': (userId: string) => void;
  'user:voted': (userId: string) => void;
  'votes:revealed': (state: GameState) => void;
  'force:logout': () => void;
  'emoji:thrown': (targetUserId: string, fromUserId: string, emoji: string, trajectory: EmojiTrajectory) => void;
  'emojis:fall': () => void;
  'emojis:shake': (userId: string) => void;
}

export interface ClientEvents {
  'user:join': (name: string) => void;
  'user:vote': (value: number) => void;
  'votes:reveal': () => void;
  'game:reset': () => void;
  'recalculate:average': () => void;
  'users:reset': () => void;
  'throw:emoji': (targetUserId: string, emoji: string) => void;
  'emojis:fall': () => void;
  'emojis:shake': (userId: string) => void;
}

export const AVAILABLE_EMOJIS = [
  'üí©', // –∫–∞–∫–∞—à–∫–∞ (–∫–ª–∞—Å—Å–∏–∫–∞!)
  'ü§°', // –∫–ª–æ—É–Ω (–∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤—Å–µ–º –Ω–µ—Å–µ—Ä—å–µ–∑–Ω–∞—è)
  'üóø', // –∫–∞–º–µ–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∞ (–∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Å–ª–∏—à–∫–æ–º —É–ø—ë—Ä—Ç—ã–π)
  'ü§å', // –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –∂–µ—Å—Ç (–º–∞–º–∞ –º–∏–∞, —á—Ç–æ –∑–∞ –æ—Ü–µ–Ω–∫–∞!)
  'ü´†', // —Ç–∞—é—â–∏–π —Å–º–∞–π–ª–∏–∫ (–∫–æ–≥–¥–∞ –≤—Å—ë –ø–ª–æ—Ö–æ)
  'ü§™', // –±–µ–∑—É–º–Ω—ã–π —Å–º–∞–π–ª–∏–∫ (–∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è)
  'üßê', // —Å–º–∞–π–ª–∏–∫ —Å –º–æ–Ω–æ–∫–ª–µ–º (–¥–ª—è —É–º–Ω—ã—Ö –º—ã—Å–ª–µ–π)
  'ü¶•', // –ª–µ–Ω–∏–≤–µ—Ü (–∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è/–ª–µ–Ω–∏–≤–∞—è)
  'üëª', // –ø—Ä–∏–∑—Ä–∞–∫ (–¥–ª—è –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫)
  'ü§Ø'  // –≤–∑—Ä—ã–≤–∞—é—â–∞—è—Å—è –≥–æ–ª–æ–≤–∞ (–∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∫–∞ —à–æ–∫–∏—Ä—É–µ—Ç)
];