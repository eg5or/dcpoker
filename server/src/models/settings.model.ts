import mongoose, { Document, Schema } from 'mongoose';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface NotificationSettings {
  newSession: boolean;
  newVote: boolean;
  voteRevealed: boolean;
  emojiReceived: boolean;
  sessionCompleted: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
export type VotingSequenceType = 'fibonacci' | 'linear' | 'tshirt';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
export interface VotingSequence {
  type: VotingSequenceType;
  values: number[];  // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export type ThemeType = 'light' | 'dark' | 'system';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
export interface UserSettingsDocument extends Document {
  userId: mongoose.Types.ObjectId;
  favoriteEmojis: string[];
  theme: ThemeType;
  language: string;
  notifications: NotificationSettings;
  votingSequence: VotingSequence;
  createdAt: Date;
  updatedAt: Date;
}

// –°—Ö–µ–º–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NotificationSettingsSchema = new Schema<NotificationSettings>({
  newSession: { type: Boolean, default: true },
  newVote: { type: Boolean, default: true },
  voteRevealed: { type: Boolean, default: true },
  emojiReceived: { type: Boolean, default: true },
  sessionCompleted: { type: Boolean, default: true }
}, { _id: false });

// –°—Ö–µ–º–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
const VotingSequenceSchema = new Schema<VotingSequence>({
  type: { 
    type: String, 
    enum: ['fibonacci', 'linear', 'tshirt'], 
    default: 'fibonacci' 
  },
  values: { 
    type: [Number], 
    default: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] 
  }
}, { _id: false });

// –°—Ö–µ–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
const UserSettingsSchema = new Schema<UserSettingsDocument>({
  userId: { 
    type: Schema.Types.ObjectId, 
    ref: 'User', 
    required: true,
    unique: true
  },
  favoriteEmojis: { 
    type: [String], 
    default: ['üëç', 'üëé', 'üî•', 'ü§î', 'üòä', '‚ù§Ô∏è'] 
  },
  theme: { 
    type: String, 
    enum: ['light', 'dark', 'system'], 
    default: 'system' 
  },
  language: { 
    type: String, 
    default: 'ru' 
  },
  notifications: { 
    type: NotificationSettingsSchema, 
    default: () => ({}) 
  },
  votingSequence: { 
    type: VotingSequenceSchema, 
    default: () => ({}) 
  },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
UserSettingsSchema.index({ userId: 1 });

// –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
UserSettingsSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
export const UserSettings = mongoose.model<UserSettingsDocument>('UserSettings', UserSettingsSchema); 