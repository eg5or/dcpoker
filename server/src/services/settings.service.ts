import mongoose from 'mongoose';
import { ThemeType, UserSettings, VotingSequenceType } from '../models/settings.model';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserSettingsData {
  favoriteEmojis?: string[];
  theme?: ThemeType;
  language?: string;
  notifications?: {
    newSession?: boolean;
    newVote?: boolean;
    voteRevealed?: boolean;
    emojiReceived?: boolean;
    sessionCompleted?: boolean;
  };
  votingSequence?: {
    type?: VotingSequenceType;
    values?: number[];
  };
}

export class SettingsService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserSettings(userId: string): Promise<any> {
    try {
      const userObjectId = new mongoose.Types.ObjectId(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let settings = await UserSettings.findOne({ userId: userObjectId });
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        settings = await UserSettings.create({
          userId: userObjectId,
          favoriteEmojis: ['üëç', 'üëé', 'üî•', 'ü§î', 'üòä', '‚ù§Ô∏è'],
          theme: 'system',
          language: 'ru',
          notifications: {
            newSession: true,
            newVote: true,
            voteRevealed: true,
            emojiReceived: true,
            sessionCompleted: true
          },
          votingSequence: {
            type: 'fibonacci',
            values: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
          },
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      
      return settings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateUserSettings(userId: string, settingsData: UserSettingsData): Promise<any> {
    try {
      const userObjectId = new mongoose.Types.ObjectId(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let settings = await UserSettings.findOne({ userId: userObjectId });
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        settings = await this.getUserSettings(userId);
      }
      
      // –í–∞–∂–Ω–æ: –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ settings –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null, —Ç–∞–∫ –∫–∞–∫ getUserSettings
      // –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (settingsData.favoriteEmojis !== undefined && settings) {
        settings.favoriteEmojis = settingsData.favoriteEmojis;
      }
      
      if (settingsData.theme !== undefined && settings) {
        settings.theme = settingsData.theme;
      }
      
      if (settingsData.language !== undefined && settings) {
        settings.language = settingsData.language;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (settingsData.notifications && settings) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!settings.notifications) {
          settings.notifications = {
            newSession: true,
            newVote: true,
            voteRevealed: true,
            emojiReceived: true,
            sessionCompleted: true
          };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (settingsData.notifications.newSession !== undefined) {
          settings.notifications.newSession = settingsData.notifications.newSession;
        }
        
        if (settingsData.notifications.newVote !== undefined) {
          settings.notifications.newVote = settingsData.notifications.newVote;
        }
        
        if (settingsData.notifications.voteRevealed !== undefined) {
          settings.notifications.voteRevealed = settingsData.notifications.voteRevealed;
        }
        
        if (settingsData.notifications.emojiReceived !== undefined) {
          settings.notifications.emojiReceived = settingsData.notifications.emojiReceived;
        }
        
        if (settingsData.notifications.sessionCompleted !== undefined) {
          settings.notifications.sessionCompleted = settingsData.notifications.sessionCompleted;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      if (settingsData.votingSequence && settings) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!settings.votingSequence) {
          settings.votingSequence = {
            type: 'fibonacci',
            values: [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
          };
        }
        
        if (settingsData.votingSequence.type !== undefined) {
          settings.votingSequence.type = settingsData.votingSequence.type;
        }
        
        if (settingsData.votingSequence.values !== undefined) {
          settings.votingSequence.values = settingsData.votingSequence.values;
        }
      }
      
      if (settings) {
        settings.updatedAt = new Date();
        await settings.save();
      }
      
      return settings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }
  
  /**
   * –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
   */
  static async addFavoriteEmoji(userId: string, emoji: string): Promise<any> {
    try {
      const userObjectId = new mongoose.Types.ObjectId(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let settings = await UserSettings.findOne({ userId: userObjectId });
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        settings = await this.getUserSettings(userId);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      if (settings && !settings.favoriteEmojis.includes(emoji)) {
        settings.favoriteEmojis.push(emoji);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–æ 12
        if (settings.favoriteEmojis.length > 12) {
          settings.favoriteEmojis = settings.favoriteEmojis.slice(-12);
        }
        
        settings.updatedAt = new Date();
        await settings.save();
      }
      
      return settings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
      throw error;
    }
  }
  
  /**
   * –£–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  static async removeFavoriteEmoji(userId: string, emoji: string): Promise<any> {
    try {
      const userObjectId = new mongoose.Types.ObjectId(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let settings = await UserSettings.findOne({ userId: userObjectId });
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (!settings) {
        return await this.getUserSettings(userId);
      }
      
      // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      settings.favoriteEmojis = settings.favoriteEmojis.filter(e => e !== emoji);
      settings.updatedAt = new Date();
      await settings.save();
      
      return settings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }
}