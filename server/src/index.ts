import dotenv from 'dotenv';
import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const httpServer = createServer(app);

// –ü–æ–ª—É—á–∞–µ–º origins –∏–∑ env –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
const corsOrigins = process.env.CORS_ORIGINS?.split(',') || ["http://localhost:5173"];

const io = new Server(httpServer, {
  cors: {
    origin: corsOrigins,
    methods: ["GET", "POST"]
  },
  pingTimeout: parseInt(process.env.PING_TIMEOUT || '10000'),
  pingInterval: parseInt(process.env.PING_INTERVAL || '5000')
});

type User = {
  id: string;
  name: string;
  isOnline: boolean;
  vote: number | null;
  changedVoteAfterReveal?: boolean;
  joinedAt: number;
  emojiAttacks: {
    [emoji: string]: number;
  };
};

type GameState = {
  users: User[];
  isRevealed: boolean;
  averageVote: number | null;
  usersChangedVoteAfterReveal: string[];
  consistency: {
    emoji: string;
    description: string;
  } | null;
};

const gameState: GameState = {
  users: [],
  isRevealed: false,
  averageVote: null,
  usersChangedVoteAfterReveal: [],
  consistency: null
};

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.emit('game:state', gameState);

  socket.on('user:join', (name: string) => {
    console.log('User joining:', socket.id, name);
    
    const existingUser = gameState.users.find(u => u.name === name);
    if (existingUser) {
      existingUser.id = socket.id;
      existingUser.isOnline = true;
      existingUser.vote = null;
      existingUser.changedVoteAfterReveal = false;
      existingUser.joinedAt = Date.now();
      existingUser.emojiAttacks = {};
    } else {
      const user: User = {
        id: socket.id,
        name,
        isOnline: true,
        vote: null,
        changedVoteAfterReveal: false,
        joinedAt: Date.now(),
        emojiAttacks: {}
      };
      gameState.users.push(user);
    }
    
    console.log('Current users:', gameState.users);
    io.emit('game:state', gameState);
  });

  socket.on('user:vote', (value: number) => {
    console.log('Vote received:', socket.id, value);
    const user = gameState.users.find(u => u.id === socket.id);
    if (user) {
      if (gameState.isRevealed && user.vote !== null && user.vote !== value) {
        user.changedVoteAfterReveal = true;
        if (!gameState.usersChangedVoteAfterReveal.includes(user.name)) {
          gameState.usersChangedVoteAfterReveal.push(user.name);
        }
      }
      user.vote = value;
      console.log('Vote registered for user:', user);
      io.emit('game:state', gameState);
    } else {
      console.log('User not found:', socket.id);
    }
  });

  socket.on('votes:reveal', () => {
    gameState.isRevealed = true;
    calculateAverageVote();
    io.emit('game:state', gameState);
  });

  socket.on('throw:emoji', (targetUserId: string, emoji: string) => {
    console.log('Received throw:emoji event:', { targetUserId, emoji });
    const targetUser = gameState.users.find(u => u.id === targetUserId);
    const fromUser = gameState.users.find(u => u.id === socket.id);
    
    if (targetUser && fromUser && targetUser.id !== fromUser.id) {
      console.log('Users found:', { targetUser: targetUser.name, fromUser: fromUser.name });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!targetUser.emojiAttacks) {
        targetUser.emojiAttacks = {};
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
      targetUser.emojiAttacks[emoji] = (targetUser.emojiAttacks[emoji] || 0) + 1;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
      const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left
      let startX, startY;
      
      switch(side) {
        case 0: // —Å–≤–µ—Ä—Ö—É
          startX = Math.random() * 100;
          startY = -10;
          break;
        case 1: // —Å–ø—Ä–∞–≤–∞
          startX = 110;
          startY = Math.random() * 100;
          break;
        case 2: // —Å–Ω–∏–∑—É
          startX = Math.random() * 100;
          startY = 110;
          break;
        case 3: // —Å–ª–µ–≤–∞
          startX = -10;
          startY = Math.random() * 100;
          break;
      }

      const trajectory = {
        startX,
        startY,
        angle: Math.random() * Math.PI * 2,
        speed: Math.random() * 20 + 40
      };

      console.log('Emitting emoji:thrown event:', {
        targetId: targetUser.id,
        fromId: fromUser.id,
        emoji,
        trajectory
      });

      io.emit('emoji:thrown', targetUser.id, fromUser.id, emoji, trajectory);
      io.emit('game:state', gameState);
    } else {
      console.log('Users not found or same user:', {
        targetFound: !!targetUser,
        fromFound: !!fromUser,
        isSameUser: targetUser?.id === fromUser?.id
      });
    }
  });

  socket.on('game:reset', () => {
    gameState.users.forEach(user => {
      user.vote = null;
      user.changedVoteAfterReveal = false;
      user.emojiAttacks = {};
    });
    gameState.isRevealed = false;
    gameState.averageVote = null;
    gameState.usersChangedVoteAfterReveal = [];
    io.emit('game:state', gameState);
  });

  socket.on('users:reset', () => {
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    gameState.users = [];
    gameState.isRevealed = false;
    gameState.averageVote = null;
    gameState.usersChangedVoteAfterReveal = [];
    gameState.consistency = null;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ
    io.emit('force:logout');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    io.emit('game:state', gameState);
  });

  socket.on('recalculate:average', () => {
    if (gameState.isRevealed) {
      calculateAverageVote();
      gameState.usersChangedVoteAfterReveal = [];
      gameState.users.forEach(user => {
        user.changedVoteAfterReveal = false;
      });
      io.emit('game:state', gameState);
    }
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
    const user = gameState.users.find(u => u.id === socket.id);
    if (user) {
      user.isOnline = false;
      io.emit('game:state', gameState);
    }
  });
});

function calculateAverageVote() {
  const votes = gameState.users
    .filter(u => u.vote !== null && u.isOnline)
    .map(u => u.vote as number);
  
  if (votes.length === 0) {
    gameState.averageVote = null;
    gameState.consistency = null;
    return;
  }

  // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–µ—Å—è—Ç—ã—Ö
  const average = votes.reduce((a, b) => a + b, 0) / votes.length;
  gameState.averageVote = Math.round(average * 10) / 10;

  // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
  const variance = votes.reduce((acc, val) => acc + Math.pow(val - average, 2), 0) / votes.length;
  const stdDev = Math.sqrt(variance);
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV) - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É
  const cv = (stdDev / average) * 100;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏
  if (cv === 0) {
    gameState.consistency = {
      emoji: "ü§©",
      description: "–ü–æ–ª–Ω–æ–µ –µ–¥–∏–Ω–æ–≥–ª–∞—Å–∏–µ!"
    };
  } else if (cv <= 15) {
    gameState.consistency = {
      emoji: "üòä",
      description: "–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å"
    };
  } else if (cv <= 30) {
    gameState.consistency = {
      emoji: "üôÇ",
      description: "–•–æ—Ä–æ—à–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å"
    };
  } else if (cv <= 50) {
    gameState.consistency = {
      emoji: "üòï",
      description: "–°—Ä–µ–¥–Ω—è—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å"
    };
  } else {
    gameState.consistency = {
      emoji: "üò¨",
      description: "–ë–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –º–Ω–µ–Ω–∏–π"
    };
  }
}

const PORT = process.env.PORT || 3001;
httpServer.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log('CORS origins:', corsOrigins);
}); 